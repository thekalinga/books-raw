#!/bin/bash

current_dir=$(pwd)
script_dir=$(dirname "$0" | while read -r a; do cd "$a" && pwd && break; done)
can_run_without_args=false

if [[ $current_dir =~ ^$script_dir ]]; then
  echo -e "Present directory is book root (or is under the book root): $script_dir\n"
  # if the directory has an `.md` file, lets assume it to be a book
  md_file_count=$(ls -1 "$current_dir"/*.md 2>/dev/null | wc -l)
  #  ignore system directory & the root directory (as it has README.md)
  if ! [[ $current_dir == "$script_dir" ]] && ! [[ $current_dir =~ /system$ ]] && ! [[ $current_dir =~ /gen(/|$) ]] && [ $md_file_count != 0 ]; then
    echo -e "Present directory has *.md files\n"
    book_dir_rel_path=$(echo "${current_dir/$script_dir/}" | sed "s/\///1")
    can_run_without_args=true
  fi
else
  echo -e "You are running the script from outside $script_dir\n"
fi

if ! [ "$can_run_without_args" = true ] && [ $# -ne 1 ]; then
  echo -e "You can also specify relative path/full path of the book directory as argument to this script (or) run it without arguments from the book directory\n"

  echo -e "Enter directory name (that contains *.md). Options are\n\n<<oldest>>\n"

  # output will be of the format <<tstamp;rel_dir_path>>. We are specifying Internal Field Separator (IFS) to be ';' & assigning them to _(ignore) & rel_dir_path variables
  while IFS=';' read -r _ rel_dir_path; do
    # if the directory has an `.md` file, lets assume it to be a book
    md_file_count=$(ls -1 "$rel_dir_path"/*.md 2>/dev/null | wc -l)
    if ! [[ $rel_dir_path =~ /system$ ]] && ! [[ $rel_dir_path =~ /gen(/|$) ]] && [ $md_file_count != 0 ]; then
      # replace just the 1st slash
      echo ${rel_dir_path/$script_dir/} | sed "s/\///1"
    fi
  done < <(find $script_dir/repo -type d -printf "%T+;%p\n" | sort)
  echo -e "\n<<newest>>"
  exit 1
fi

if [[ -z "${book_dir_rel_path+set}" ]] && [ $# -eq 1 ]; then
  #  Irrespective of whether the user has specified relative/absolute path for the book dir, lets simply convert it into relative path & work it from there
  book_dir_rel_path=$(echo "${1/$script_dir/}" | sed "s/^\///1")
fi

echo -e "Book being considered is: $book_dir_rel_path\n"

if ! [[ -d "${script_dir}/${book_dir_rel_path}" ]]; then
  echo -e "Book relative specified \t\t $book_dir_rel_path\n\t\tcould not be found under ${script_dir}"
fi

# Lets set the current working directory as script directory so all operations are performed as if we are working from that directory & restore original dir on exit
# pushd echos directorys being pushed onto sout. lets just redirect it into vaccum
pushd "$(dirname "${BASH_SOURCE:0}")"  > /dev/null || exit
trap popd EXIT

echo -e "All operations would be performed using this directory as working directory: $(pwd)\n"

if [ ! -f "$book_dir_rel_path/book-gen.tex" ]; then
  echo -e "file does not exist: $book_dir_rel_path/book-gen.tex"
  exit 1
fi

temp_dir=$(mktemp -d)
gen_script=$temp_dir/gen.sh

echo "#!/bin/sh

[ ! -d gen ] && mkdir gen

# Convert the MARKDOWN â†’ PDF using pandoc (internally uses lualatex)
# since we are using 'fontspec' for setting quote fonts, we need to use luatex instead of pdflatex
lualatex \
    -halt-on-error \
    -interaction nonstopmode \
    -output-directory gen/ \
    book-gen.tex
" > $gen_script

chmod +x $gen_script

echo -e "Written script to run inside docker to:\t$gen_script\n"
echo -e "Executing the following command inside docker environment:\n
docker run --rm --volume "`pwd`/$book_dir_rel_path:/data" \\
       --volume "$temp_dir:/generator" \\
       --user `id -u`:`id -g` \\
       --entrypoint "/generator/gen.sh" \\
       custom/luatex-pandoc-docker:1.0\n"

docker run --rm --volume "`pwd`/$book_dir_rel_path:/data" \
   --volume "$temp_dir:/generator" \
   --user `id -u`:`id -g` \
   --entrypoint "/generator/gen.sh" \
   custom/luatex-pandoc-docker:1.0
